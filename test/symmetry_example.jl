using ACEhamiltonians, Statistics, StaticArrays

rmse(x) = sqrt(mean(x.^2))

function state_AB_data()


    # X⃑ = Bₓ - Aₓ
    rr0 = @SVector [ 1.343410000000,   1.440629000000,   2.924666000000]
    rr_mid = @SVector [ 1.343410000000/2,   1.440629000000/2,   2.924666000000/2]

    # Positions of environmental atoms relative to the first atom's position
    rr = @SMatrix [
         2.349868000000  -1.440629000000  -2.924666000000
        -3.135220000000   1.842507000000  -2.924666000000
         0.558058000000   1.842507000000  -2.924666000000
        -1.901468000000  -3.283136000000   0.000000000000
         1.791810000000  -3.283136000000   0.000000000000
        -3.693278000000   0.000000000000   0.000000000000
         3.693278000000   0.000000000000   0.000000000000
        -1.791810000000   3.283136000000   0.000000000000
         1.901468000000   3.283136000000   0.000000000000
        -0.558058000000  -1.842507000000   2.924666000000
         3.135220000000  -1.842507000000   2.924666000000
        -2.349868000000   1.440629000000   2.924666000000
         5.036688000000   1.440629000000   2.924666000000
        -0.448400000000   4.723765000000   2.924666000000
         3.244878000000   4.723765000000   2.924666000000
         0.785352000000  -0.401878000000   5.849332000000
         4.478630000000  -0.401878000000   5.849332000000
        -1.006458000000   2.881258000000   5.849332000000
         1.064400490000   1.469831600000  -5.094174460000
         2.298152490000  -3.655811400000  -2.169508460000
        -3.186935510000  -0.372675400000  -2.169508460000
         0.506342490000  -0.372675400000  -2.169508460000
         4.199620490000  -0.372675400000  -2.169508460000
        -1.285467510000   2.910460600000  -2.169508460000
         2.407810490000   2.910460600000  -2.169508460000
        -3.744993510000  -2.215182400000   0.755157540000
        -0.051715510000  -2.215182400000   0.755157540000
         3.641562490000  -2.215182400000   0.755157540000
        -1.843525510000   1.067953600000   0.755157540000
         1.849752490000   1.067953600000   0.755157540000
         5.543030490000   1.067953600000   0.755157540000
         0.057942490000   4.351089600000   0.755157540000
         3.751220490000   4.351089600000   0.755157540000
        -2.401583510000  -0.774553400000   3.679823540000
         1.291694490000  -0.774553400000   3.679823540000
         4.984972490000  -0.774553400000   3.679823540000
        -0.500115510000   2.508582600000   3.679823540000
         3.193162490000   2.508582600000   3.679823540000
         6.886440490000   2.508582600000   3.679823540000
         1.401352490000   5.791718600000   3.679823540000
        -1.058173510000   0.666075600000   6.604489540000
         2.635104490000   0.666075600000   6.604489540000
    ]

    rr_m = zeros(size(rr))
    for i = 1:size(rr)[1]
        rr_m[i,:] = rr[i,:] - rr_mid
    end
    rr_m = SMatrix{42,3,Float64}(rr_m)

    # Associated pp sub-block
    values = [
        -0.080593844304   0.094853465184  -0.013248701289
         0.072655137272   0.019359955432  -0.051224212700
        -0.030171912963  -0.106280856355  -0.113477465079
    ]

    return rr0, rr_m, values
end

function state_BA_data()
    rr0 = @SVector [ -1.343410000000,  -1.440629000000,  -2.924666000000]
    rr_mid = @SVector [ -1.343410000000/2,  -1.440629000000/2,  -2.924666000000/2]

    rr = @SMatrix [
         1.006458000000  -2.881258000000  -5.849332000000
        -4.478630000000   0.401878000000  -5.849332000000
        -0.785352000000   0.401878000000  -5.849332000000
        -3.244878000000  -4.723765000000  -2.924666000000
         0.448400000000  -4.723765000000  -2.924666000000
        -5.036688000000  -1.440629000000  -2.924666000000
         2.349868000000  -1.440629000000  -2.924666000000
        -3.135220000000   1.842507000000  -2.924666000000
         0.558058000000   1.842507000000  -2.924666000000
        -1.901468000000  -3.283136000000   0.000000000000
         1.791810000000  -3.283136000000   0.000000000000
        -3.693278000000   0.000000000000   0.000000000000
         3.693278000000   0.000000000000   0.000000000000
        -1.791810000000   3.283136000000   0.000000000000
         1.901468000000   3.283136000000   0.000000000000
        -0.558058000000  -1.842507000000   2.924666000000
         3.135220000000  -1.842507000000   2.924666000000
        -2.349868000000   1.440629000000   2.924666000000
        -0.279009510000   0.029202600000  -8.018840460000
         0.954742490000  -5.096440400000  -5.094174460000
        -4.530345510000  -1.813304400000  -5.094174460000
        -0.837067510000  -1.813304400000  -5.094174460000
         2.856210490000  -1.813304400000  -5.094174460000
        -2.628877510000   1.469831600000  -5.094174460000
         1.064400490000   1.469831600000  -5.094174460000
        -5.088403510000  -3.655811400000  -2.169508460000
        -1.395125510000  -3.655811400000  -2.169508460000
         2.298152490000  -3.655811400000  -2.169508460000
        -3.186935510000  -0.372675400000  -2.169508460000
         0.506342490000  -0.372675400000  -2.169508460000
         4.199620490000  -0.372675400000  -2.169508460000
        -1.285467510000   2.910460600000  -2.169508460000
         2.407810490000   2.910460600000  -2.169508460000
        -3.744993510000  -2.215182400000   0.755157540000
        -0.051715510000  -2.215182400000   0.755157540000
         3.641562490000  -2.215182400000   0.755157540000
        -1.843525510000   1.067953600000   0.755157540000
         1.849752490000   1.067953600000   0.755157540000
         5.543030490000   1.067953600000   0.755157540000
         0.057942490000   4.351089600000   0.755157540000
        -2.401583510000  -0.774553400000   3.679823540000
         1.291694490000  -0.774553400000   3.679823540000
    ]

    rr_m = zeros(size(rr))
    for i = 1:size(rr)[1]
        rr_m[i,:] = rr[i,:] - rr_mid
    end
    rr_m = SMatrix{42,3,Float64}(rr_m)

    values = [
        -0.080593844304   0.072655137272  -0.030171912963
         0.094853465184   0.019359955432  -0.106280856355
        -0.013248701289  -0.051224212700  -0.113477465079
    ]

    return rr0, rr_m, values
end

function test(AB_ref, BA_ref, AB_pred, BA_pred; tol=1E-5)

    # Check tolerances
    check_1 = rmse(AB_pred - AB_ref) < tol
    check_2 = rmse(BA_pred - BA_ref)  < tol

    # Ensure AB ≠ BA
    check_3 = rmse(AB_ref - BA_ref') > tol
    check_4 = rmse(AB_pred - BA_pred') > tol

    # Ensure AB = BA'
    check_5 = rmse(AB_ref - BA_ref') < tol
    check_6 = rmse(AB_pred - BA_pred') < tol

    @info "State AB predictions within tolerance  : $check_1"
    @info "State BA predictions within tolerance  : $check_2"
    @info "Reference values obey AB ≠ BA relation : $check_3"
    @info "Predicted values obey AB ≠ BA relation : $check_4"
    @info "Reference values obey AB - BAᵀ relation: $check_5"
    @info "Predicted values obey AB - BAᵀ relation: $check_6"

end


# Step 1: Load state data and reference sub-block values.
AB_rr0, AB_rr, AB_reference = state_AB_data()
BA_rr0, BA_rr, BA_reference = state_BA_data()

# Step 2: Convert rr and rr0 data into state objects.
state_AB = [
    BondState(AB_rr0, AB_rr0, true),
    (BondState(rr, AB_rr0, false) for rr in eachrow(AB_rr))...
]

state_BA = [
    BondState(BA_rr0, BA_rr0, true),
    (BondState(rr, BA_rr0, false) for rr in eachrow(BA_rr))...
]

# Step 3: Construct a homo-orbital off-site pp basis.
pp_basis = Basis(off_site_ace_basis_sym(1, 1, 1, 6, 10.0), (14, 14, 6, 6))

# Step 4: Fit the model to the AB state only.
fit!(pp_basis, DataSet(AB_reference[:, :, :], [0; 0;;], [state_AB]))

# Step 5: Predict the pp sub-blocks for both the AB and BA states.
AB_predicted = predict(pp_basis, state_AB)
BA_predicted = predict(pp_basis, state_BA)

# Step 6: Evaluate the results via a call to the `test` function.
test(AB_reference, BA_reference, AB_predicted, BA_predicted)
